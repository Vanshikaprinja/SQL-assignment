use mavenmovies;
-- Question 1: Retrieve the total number of rentals made in the Sakila database --

select count(rental_id) from rental;


-- Question 2:Find the average rental duration (in days) of movies rented from the Sakila database--
select avg(rental_duration) from film;
 
-- Question 3:display the first name and last name of customers in uppercase.
select upper(first_name) ,upper( last_name ) from customer;

-- Question 4:Extract the month from the rental date and display it alongside the rental ID.
select * from rental;
select month(rental_date) as rental_month , rental_id from rental;


-- Question 5:Retrieve the count of rentals for each customer (display customer ID and the count of rentals).
select count(rental_id),customer_id from rental group by customer_id;


-- Question 6:Find the total revenue generated by each store.
select * from payment;
select s.store_id, sum(amount) from payment p
inner join staff st on p.staff_id=st.staff_id
inner join store s on st.store_id=s.store_id
group by s.store_id;

-- question 7 :Display the title of the movie, customer s first name, and last name who rented it --

select f.title ,c.first_name,c.last_name,r.rental_id from film f
inner join inventory i on f.film_id = i.film_id
inner join rental r on i.inventory_id = r.inventory_id
inner join customer c on r.customer_id = c.customer_id;


-- Question 8:Retrieve the names of all actors who have appeared in the film "Gone with the Wind."
select*from film;

select a.first_name, a.last_name from actor a
inner join film_actor fa on a.actor_id =fa.actor_id
inner join film f on fa.film_id=f.film_id 
where f.title = "Gone with the Wind";

-- Question 1:Determine the total number of rentals for each category of movies--
select count(*)as rental_id, c.name as category_name ,fc.category_id
from rental as r
inner join inventory i on r.inventory_id= i.inventory_id
inner join film f on i.film_id= f.film_id
inner join film_category fc on f.film_id = fc.film_id
inner join category c on fc.category_id=c.category_id
group by c.name, fc.category_id;


-- Question 2:Find the average rental rate of movies in each language Hint: JOIN film and language tables, then use AVG () and GROUP BY.

select avg(f.rental_rate) as avg_rental, l.name as language_name, l.language_id
from film AS f
inner join language l on f.language_id=l.language_id
group by l.name,l.language_id;


-- Question 3:Retrieve the customer names along with the total amount they've spent on rentals--

select sum(p.amount) as tot_rental, c.first_name,c.last_name
from payment as p
inner join rental r on p.rental_id=r.rental_id
inner join customer c on r.customer_id=c.customer_id
group by c.first_name,c.last_name;

-- Question 4:List the titles of movies rented by each customer in a particular city (e.g., 'London') --

select f.title ,c.first_name, c.last_name, c.customer_id , ct.city as city_name 
from film as f
inner join inventory i on f.film_id = i.film_id
inner join rental r on i.inventory_id = r.inventory_id
inner join customer c on r.customer_id = r.customer_id
inner join address a on c.address_id = a.address_id
inner join city ct on a.city_id = ct.city_id
GROUP BY c.customer_id, c.first_name, c.last_name ,f.title,ct.city;


-- Question 5:Display the top 5 rented movies along with the number of times they've been rented.Hint: JOIN film, inventory, and rental tables, then use cOUNT() and GROUP BY, and limit the results.
 select* from film;
 select f.film_id,f.title as movie_title  ,count(*)
as rental_count from film f
inner join inventory i on f.film_id=i.film_id
inner join rental r on i.inventory_id=r.inventory_id
group by f.film_id, movie_title
order by rental_count desc
limit 5;

-- Question 6:Determine the customers who have rented movies from both stores (store ID 1 and store ID 2).




select c.first_name ,c.last_name , c.customer_id
from customer c
inner join rental r on c.customer_id=r.customer_id
inner join inventory i on r.inventory_id=i.inventory_id
inner join store s on i.store_id = s.store_id
where s.store_id in (1,2)
group by c.first_name ,c.last_name , c.customer_id
having count(distinct s.store_id) =2;
