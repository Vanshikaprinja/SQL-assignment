use mavenmovies;
-- 1. **Rank the customers based on the total amount they've spent on rentals.**
select customer_id,amount ,
rank()over(partition by amount order by rental_id)as customer_ranking
from payment;

-- 2. **Calculate the cumulative revenue generated by each film over time.**
select f.film_id,p.amount,r.rental_date,
sum(amount)over (partition by film_id order by rental_date)as cumulative_revenue
from film f
join inventory i on f.film_id=i.film_id
join rental r on i.inventory_id=r.inventory_id
join payment p on r.rental_id=p.rental_id
order by
f.film_id,r.return_date;

-- 3. **Determine the average rental duration for each film, considering films with similar lengths.**
select rental_duration , film_id , length,
avg(rental_duration) over(partition by length order by rental_duration)
from film
order by rental_duration ,length;
-- 4. **Identify the top 3 films in each category based on their rental counts.**
select film_id,category_id,rental_duration
from(
select f.film_id,f.rental_duration,fc.category_id,
row_number()over (partition by category_id order by rental_duration)
from film f
join film_category fc on f.film_id=fc.film_id)as film_ranking
 limit 3;

-- 5. **Calculate the difference in rental counts between each customer's total rentals and the average rentals across all customers.*

select customer_id,count(rental_id),avg(rental_id),count(rental_id)-avg(count(rental_id))over()as difference_rentalcounts
from rental group by customer_id;

-- 6. **Find the monthly revenue trend for the entire rental store over time.**
select*from payment;

select distinct monthname(r.rental_date),
sum(amount)over(partition by store_id 
order by monthname(rental_date))as monthly_revenue
from payment p
join rental r on p.rental_id=r.rental_id
join staff s on r.staff_id=s.staff_id;

-- 7. **Identify the customers whose total spending on rentals falls within the top 20% of all customers.**
with customer_spending AS(
select customer_id,sum(amount)as total_spending,
sum(amount)over()as total_overallspending
from payment
 GROUP BY customer_id)
select customer_id,total_spending from customer_spending
where total_spending >= 0.8 *total_overallspending;

-- 8. **Calculate the running total of rentals per category, ordered by rental count.**

select fc.category_id,r.rental_id,
sum(rental_id) over(partition by category_id order by rental_id desc)
as running_total
from rental r
join inventory i on r.inventory_id=i.inventory_id
join film_category fc on i.film_id=fc.film_id;

-- 9. **Find the films that have been rented less than the average rental count for their respective categories.**
   SELECT f.film_id,f.title,r.rental_id,fc.category_id
FROM 
    film f
JOIN 
    film_category fc ON f.film_id = fc.film_id
JOIN inventory i on fc.film_id=i.film_id
join rental r on i.inventory_id=r.inventory_id
join(
    SELECT 
        rental_id,
        AVG(rental_id) OVER (PARTITION BY category_id) AS avg_rental_count
    FROM 
        rental
        join inventory on rental.inventory_id=inventory.inventory_id
        join film_category on inventory.film_id=film_category.film_id
) AS subquery
WHERE 
    r.rental_id < avg_rental_count;

-- 10. **Identify the top 5 months with the highest revenue and display the revenue generated in each month.**

select distinct monthname(r.rental_date),sum(amount) over(order by monthname(rental_date))as monthly_rev 
from payment p
join rental r on p.rental_id=r.rental_id
limit 5;